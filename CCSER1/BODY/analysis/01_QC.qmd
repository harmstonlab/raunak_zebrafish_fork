---
title: 01_QC
author: Qian Hui TAN
date: '`r format(Sys.time(), "%d %B %Y")`'
format:
  html: 
    keep-md: true
    embed-resources: true
    df-print: kable
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    smooth-scroll: true
    code-tools: true
    code-line-numbers: true
  gfm: 
    df-print: kable
    toc: true 
    toc-depth: 3
    number-sections: true
---

# 01_QC

In this notebook, we perform quality control on our dataset. 


```{r global_options, echo=FALSE}
knitr::opts_chunk$set(fig.path='../figures/01_QC/',
                      dev = c("png"))

```

# Setup

```{r}
## If output directory doesn't exist, create it
if(!dir.exists("../output")){
    dir.create("../output")
  }
  
if(!dir.exists("../output/01_QC")){
    dir.create("../output/01_QC")
  }
  
output_dir <- "../output/01_QC/"
  
```


```{r}
suppressPackageStartupMessages({
    library(dplyr)
    library(readr)
    library(tidyr)
    library(ggplot2)
    library(janitor)
    library(GEOquery)
    library(DESeq2)
    library(reshape2) # melt function
    library(biomaRt)
    library(GenomicFeatures)
    library(scales)
    library(ggrepel)
    library(pheatmap)
    library(viridis)
    library(lubridate)
    library(DT)
})

source("../scripts/R/clustering_functions.R")
source("../scripts/R/ma_plot_function.R")
```



```{r}
# Generic theme
th <- theme(
         plot.title = element_text(size = 20),
         plot.subtitle = element_text(size = 15),
         axis.title.x = element_blank(),
         axis.title.y = element_blank(),
         axis.text.x = element_text(size = 12),
         axis.text.y = element_text(size = 12))

# PCA theme
pca_th <- theme(plot.title = element_text(size = 20),
         axis.title.x = element_text(size = 15), 
         axis.title.y = element_text(size = 15),
         axis.text.x = element_text(size = 12),
         axis.text.y = element_text(size = 12))
```

We first create gene-level annotations:

```{r}
#| eval: FALSE
### --- Get gene-level annotations (run once) --- ###

dr.gtf.db <- makeTxDbFromGFF("../data/annotations/Danio_rerio.GRCz11.102.chr.gtf.gz", format="gtf")
ensembl.genes = genes(dr.gtf.db)

fish = useEnsembl(biomart = "ENSEMBL_MART_ENSEMBL", 
                  host = "asia.ensembl.org", 
                  dataset = "drerio_gene_ensembl", 
                  version = "102") #change host as needed

bm.annotations = getBM(attributes=c("ensembl_gene_id", "entrezgene_id", "gene_biotype", "description", "zfin_id_symbol"), mart=fish, filters="ensembl_gene_id", values=ensembl.genes$gene_id, uniqueRows=TRUE)

ensembl.genes$zfin_id_symbol = bm.annotations$zfin_id_symbol[ match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]
ensembl.genes$gene_biotype = bm.annotations$gene_biotype[ match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]
ensembl.genes$status = bm.annotations$status[ match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]
ensembl.genes$description = bm.annotations$description[ match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]
ensembl.genes$entrezgene_id = bm.annotations$entrezgene_id[ match(ensembl.genes$gene_id, bm.annotations$ensembl_gene_id) ]


# save this as RDS so we don't have to keep running it
saveRDS(bm.annotations, file = "../output/01_QC/bm_annotations.RDS")
saveRDS(ensembl.genes, file = "../output/01_QC/ensembl.genes.RDS")
```

```{r}
ensembl.genes <- readRDS("../output/01_QC/ensembl.genes.RDS")
```

# Preparing objects for DESeq

## Creating the data matrix

```{r}
body = read.delim("../data/rawCounts_Body.txt", sep = "")

# Make gene names as rownames
rownames(body) <- body$X
body <- body[ ,-1]
```

```{r}
data = body

# DESeq needs read counts to be integers
data_mat = apply(round(data), c(1,2), as.integer)

head(data_mat)
```


## Metadata wrangling
```{r}
df <- tibble(sample_id = colnames(body))

# WT metadata
df_wt <- df[grep("WT", df$sample_id),] %>% 
  separate(sample_id, into = c("condition", "part", "replicate"),
           remove = FALSE)


# non WT metadata
df_ccser1 <- df[grep("CCSER1", df$sample_id),] %>% 
  separate(sample_id, into = c("gene", "mutant_type", "part", "replicate"),
           remove = FALSE) %>% 
  unite(col = "condition", gene:mutant_type)

# combine 
experimental_metadata <- rbind(df_wt, df_ccser1)

head(experimental_metadata)
```


Fix sample order:
```{r}
#sample_order <- c("WT_1", "WT_2", "WT_3",
#                  "A9_1", "A9_2", "A9_3",
#                  "C11_1", "C11_2", "C11_3")

#experimental_metadata$sample_id <- factor(experimental_metadata$sample_id, 
#                                          levels = sample_order)


# Specifying which group is the control group to make appropriate contrasts downstream
experimental_metadata$condition <- factor(experimental_metadata$condition)
experimental_metadata$condition <- relevel(experimental_metadata$condition, ref = "WT")
```


## Create DESeq object

```{r}
# Create DESeq object
dds = DESeqDataSetFromMatrix(data_mat, experimental_metadata, ~ condition)
colnames(dds) = colnames(data_mat)

# Relevel coldata
colData(dds)$condition <- as.factor(as.character(colData(dds)$condition))

colnames(dds)


#Estimates the size factors using the "median ratio method" described by Equation 5 in Anders and Huber (2010)
dds <- estimateSizeFactors(dds) 
#This function obtains dispersion estimates for a count data set
dds <- estimateDispersions(dds)
#This function transforms the count data to the log2 scale in a way which minimizes differences between samples for rows with small counts
rld <- rlog(dds, blind = TRUE) # use blind = TRUE for QC
```

```{r}
data_mat_nonzero = data_mat[rowSums(data_mat) > 0, ] # Remove non-zero rows
```

## How many non-zero rows?

How many genes are there in the zebrafish genome? 
```{r}
nrow(data_mat)
```

How many genes are expressed (at least 1 read in at least 1 sample)? 
```{r}
nrow(data_mat_nonzero)
```

What percentage is this? 

```{r}
nrow(data_mat_nonzero)/nrow(data_mat) * 100
```

84% of all rows are nonzero.


# DESeq QC 

## Dispersion estimates

```{r}
#| label: prefilt-disp-est
## Plot dispersion estimates
plotDispEsts(dds, main = "Dispersion estimates, before filtering")
```

## QC - number of detected genes

Examining our dataset:

```{r}
dds
```

We plot a few key metrics to check our data quality: 


```{r}
plt_title = "Before Filtering"
```

::: {.panel-tabset}
### Read counts per sample

```{r}
total_counts <- as.data.frame(colSums(counts(dds)))
colnames(total_counts) <- "total_counts"
total_counts$name = rownames(total_counts)
```

```{r}
#| label: prefilt-qc-rcpersample
# Plot
ggplot(total_counts, aes(x = name, y = total_counts)) +
    geom_bar(stat = "identity") +
    scale_y_continuous("Read counts", 
                       limits = c(0, 1.5e7),
                       expand = c(0, 0),
                       breaks = seq(0, 1.5e7, 5e6)) +
    geom_hline(yintercept = 1e7, color = "blue", linetype = "dashed") +
    labs(title = "Read counts per sample",
         x = element_blank()) +
    theme_minimal() +
    coord_flip()
```

### Number of genes detected per sample

```{r}
#| label: prefilt-qc-ngenes

detected = apply(counts(dds), 2, function(col) sum(col > 0 ))
detected = as.data.frame(detected)
detected$name = row.names(detected)
                 
ggplot(detected, aes(x=name, y=detected)) + 
                 geom_bar(stat="identity") + 
                 theme_minimal() + 
                 coord_flip() + 
                 scale_y_continuous("Number of Genes detected", expand=c(0,0),
                                    limits = c(0, 30000)
                                    ) + 
                 scale_x_discrete("Sample") +
                 labs(title = "# of genes detected", 
                     subtitle = plt_title) +
                 geom_hline(yintercept = 20000, color = "blue", linetype = "dashed") 
```

### Size factors

```{r}
#| label: prefilt-sf
df = data.frame(sample_id = names(sizeFactors(dds)), 
                sizeFactors = sizeFactors(dds))

ggplot(df, aes(x = sample_id, y=sizeFactors)) + 
    geom_bar(stat="identity") + 
    scale_y_continuous(limits=c(0,2), expand=c(0,0)) + 
    labs(title = "Size factors for each sample",
         subtitle = plt_title, 
         x = element_blank()) +
    theme_minimal() + 
    theme(axis.text.x = element_text(angle = 90, hjust=1, 
                                     colour="black", size= 12))
```

### Normalized counts (boxplot)

```{r}
#| label: prefilt-qc-ncounts

nc = counts(dds, normalized=TRUE)
nc.melt = melt(nc)

ggplot(nc.melt, aes(x=Var2, y=value)) + 
    geom_boxplot() + 
    theme_classic() + 
    theme(axis.text.x = element_text(angle = 90, colour="black", hjust = 1,
                                     size = 12)) + 
    scale_x_discrete("Sample") + 
    scale_y_continuous("Normalised counts") +
    labs(title = "Normalized counts",
        subtitle = plt_title) +
    th

```

```{r}
nc.threshold = 2e5
test = apply(nc, 1, function(x){ any(x > nc.threshold) })
```

The genes with normalized counts greater than `r nc.threshold` are:

```{r}
above_threshold <- as.data.frame(ensembl.genes[names(test[test])])

above_threshold[ ,colnames(above_threshold) %in% 
                   c("gene_id", "gene_biotype", "zfin_id_symbol")]
```

All are protein_coding genes.

Plotting the rRNA graph: 
```{r}
#| label: prefilt-qc-rrna

rrna.genes = names(ensembl.genes[ensembl.genes$gene_biotype %in% c("Mt_rRNA", "rRNA")])
percentage.of.rrna = (colSums(counts(dds[ rownames(counts(dds)) %in% rrna.genes])) / colSums(counts(dds))) * 100

percentage.of.rrna = as.data.frame(percentage.of.rrna)
percentage.of.rrna$name = row.names(percentage.of.rrna)
#percentage.of.rrna$name = factor(percentage.of.rrna$name,rev(experimental_metadata$sample_id))
ggplot(percentage.of.rrna, 
       aes(x=name, y=percentage.of.rrna)) + 
        geom_hline(yintercept = 5, color = "blue", linetype = "dashed") +
        geom_bar(stat="identity") + 
        theme_classic() + 
        coord_flip() + 
        scale_y_continuous("% rRNA", expand=c(0,0), limits = c(0, 30)) +
        labs(title = "% rRNA") 
```

Checking summary statistics for rRNA: 
```{r}
summary(percentage.of.rrna$percentage.of.rrna)
```

There's a tiny amount of rRNA (< 0.07%). This is good - our samples don't show large amounts of rRNA present. 

### Proportions of gene biotypes

```{r}
#| label: prefilt-qc-genebiotypes

pc = ensembl.genes$gene_id[ensembl.genes$gene_biotype == "protein_coding"]
pg = ensembl.genes$gene_id[ensembl.genes$gene_biotype %in% unique(ensembl.genes$gene_biotype)[grep("pseudogene", unique(ensembl.genes$gene_biotype))]]
lc = ensembl.genes$gene_id[ensembl.genes$gene_biotype == "lincRNA"]

totalcounts.pc = colSums(counts(dds)[rownames(counts(dds)) %in% pc,])
totalcounts.pg = colSums(counts(dds)[rownames(counts(dds)) %in% pg,])
totalcounts.lc = colSums(counts(dds)[rownames(counts(dds)) %in% lc,])

totalcounts.other = colSums(counts(dds)[!(rownames(counts(dds)) %in% c(lc,pc,pg)),])

counts.by.biotype = data.frame(name = names(totalcounts.pc),
                         protein_coding = totalcounts.pc,
                         pseudogene = totalcounts.pg,
                         lincRNA = totalcounts.lc,
                         other = totalcounts.other
                         
                         )

#counts.by.biotype$name = factor(counts.by.biotype$name, experimental_metadata$sample_id)

counts.by.biotype = as.data.frame(t(apply(counts.by.biotype[,2:5], 1, function(x){ 100 * (x / sum(x)) }) ))
counts.by.biotype$name = names(totalcounts.pc)
#counts.by.biotype$name = factor(counts.by.biotype$name, #experimental_metadata$sample_id)

counts.by.biotype.melt = melt(counts.by.biotype)


ggplot(counts.by.biotype.melt, aes(x=name, y=value, fill=variable)) +  
    geom_bar(stat="identity") + 
    theme_classic() + 
    scale_y_continuous("% reads", labels = dollar_format(suffix = "%", prefix = ""),  
                       expand=c(0,0)) + scale_x_discrete("Sample") + 
    theme(axis.text.x = element_text(angle = 90, colour="black", #family="Arial", 
                                     hjust = 1, size=12)) +
    labs(title = "Proportions of gene biotypes", 
        subtitle = plt_title) 
```

Most genes are protein-coding, as expected.
:::

## QC - clustering

We perform 3 types of Quality Control to assess our DESeq dataset:

-   Correlation matrix heatmap
-   Hierarchical clustering
-   PCA

::: {.panel-tabset}
### Correlation matrix heatmap

```{r}
#| label: prefilt-heatmap
#| fig.height: 12
#| fig.width: 12

### Extract the rld matrix from the object
rld_mat <- assay(rld)  
### Compute pairwise correlation values
rld_cor <- cor(rld_mat)
### Plot heatmap
pheatmap(rld_cor, main = "Correlation heatmap, before filtering")

```


### Hierarchical clustering

```{r}
#| label: prefilt-hclust

sampleDists <- dist(t(assay(rld)))
plot(hclust(sampleDists), main = paste0("Cluster Dendrogram, ", plt_title))
```

### PCA

```{r}
#| label: prefilt-pca-bycondition
make_pca(rld, intgroup = "condition",
         title = "PCA, before filtering")
```

### PCA, labelled
```{r}
#| label: prefilt-pca-all-label

make_pca(rld, intgroup = "condition", label = TRUE,
         title = "PCA, before filtering")
```

### PCA, by size factor
```{r}
#| label: prefilt-pca-all-sf
#| message: false

make_pca(rld, intgroup = "sizeFactor",
         title = "PCA plot, before filtering") +
  scale_color_viridis(option = "A")
```
:::

This looks good - PC1 and 2 both capture biological variation. Samples also cluster within conditions. 


All our key metrics look good. Read counts per sample, number of genes per sample are all high, and relatively similar across all samples. Most genes are protein-coding, as expected. Data is of high quality. 


# Remove rRNA and mitochondrial genome

We remove all genes that map to rRNA, as well as the mitochondrial chromosome before we proceed with downstream analysis. 

```{r}
plt_title = "after removing rRNA and mitochondrial genome"
```

Checking MT chromosome intact: 

```{r}
in_dds = ensembl.genes[na.omit(match(rownames(counts(dds)), ensembl.genes$gene_id)), ]
table(seqnames(in_dds))
```

Remove MT chromosome, rerun DESeq: 
```{r}
# Remove mitochondrial genome
mit_genes <- ensembl.genes[seqnames(ensembl.genes) %in% "MT", ]$gene_id
dds_rm_mit <- dds[!rownames(counts(dds)) %in% mit_genes, ]

# Remove rRNA
dds_filt = dds_rm_mit[!(row.names(counts(dds_rm_mit)) %in% 
                   ensembl.genes$gene_id[ensembl.genes$gene_biotype %in% 
                                           c("rRNA", "snoRNA", "snRNA", "Mt_rRNA")]), ]
dds_filt = dds_filt[rowSums(counts(dds_filt)) > 0, ]

# Re-estimate dispersions
dds_filt <- estimateSizeFactors(dds_filt) 
dds_filt <- estimateDispersions(dds_filt)
rld_filt <- rlog(dds, blind = TRUE) # use blind = TRUE for QC
```
Check that mitochondrial genome has been removed: 

```{r}
in_dds = ensembl.genes[na.omit(match(rownames(counts(dds_filt)), ensembl.genes$gene_id)), ]
table(seqnames(in_dds))
```

## Check rRNA removed

```{r}
#| label: rmrna-qc-rrna-percent-rrna
rrna.genes = names(ensembl.genes[ensembl.genes$gene_biotype %in% c("Mt_rRNA", "rRNA", 
                                                                   "snoRNA", "snRNA")])

percentage.of.rrna = (colSums(counts(dds_filt[rownames(counts(dds_filt)) %in% rrna.genes])) / colSums(counts(dds_filt))) * 100
percentage.of.rrna = as.data.frame(percentage.of.rrna)
percentage.of.rrna$name = row.names(percentage.of.rrna)
#percentage.of.rrna$name = factor(percentage.of.rrna$name, rev(experimental_metadata$sample_id))


ggplot(percentage.of.rrna, aes(x=name, y=percentage.of.rrna)) +
  geom_bar(stat="identity") + theme_classic() + coord_flip() + scale_y_continuous("% rRNA", expand=c(0,0)) +
  scale_x_discrete("Sample") +
  ggtitle(paste0("% rRNA, ", plt_title))
```

Checking that rRNA percentage is now zero: 
```{r}
summary(percentage.of.rrna$percentage.of.rrna)
```

## QC - number of genes

::: {.panel-tabset}
### Size Factors after rRNA removal

```{r}
#| label: rmrna-sf

df = data.frame(sample_id = names(sizeFactors(dds_filt)), sizeFactors = sizeFactors(dds_filt))

ggplot(df, aes(x = sample_id, y=sizeFactors)) + 
  geom_bar(stat="identity") + 
  scale_y_continuous(limits=c(0,2), expand=c(0,0)) + 
  theme_classic() + 
  theme(axis.text.x = element_text(angle = 90, hjust=1, colour="black", size=12)) +
  geom_hline(yintercept = 1, color = "blue", linetype = "dashed") +
  ggtitle(paste0("Size Factors, ", plt_title))
```

Summary of size factors: 
```{r}
summary(sizeFactors(dds_filt))
```

Size factors for each sample: 
```{r}
print(sizeFactors(dds_filt))
```


### Read counts per sample after rRNA and chrM removal
```{r}
total_counts <- as.data.frame(colSums(counts(dds_filt)))
colnames(total_counts) <- "total_counts"
total_counts$name = rownames(total_counts)

```


```{r}
#| label: rmrna-qc-filt-rcpersample
# Plot
ggplot(total_counts, aes(x = name, y = total_counts)) +
    geom_bar(stat = "identity") +
    scale_y_continuous("Read counts", 
                       limits = c(0, 1.5e7),
                       expand = c(0, 0),
                       breaks = seq(0, 1.5e7, 0.5e7)) +
    geom_hline(yintercept = 1e7, color = "blue", linetype = "dashed") +
    labs(title = "Read counts per sample",
         subtitle = "after removing chrM and rRNA",
         x = element_blank()) +
    theme_minimal() +
    coord_flip()
```

### Number of genes detected per sample after rRNA and chrM removal
```{r}
#| label: rmrna-qc-filt-ngenes

detected = apply(counts(dds_filt), 2, function(col) sum(col > 0 ))
detected = as.data.frame(detected)
detected$name = row.names(detected)
#detected$name = factor(detected$name, rev(experimental_metadata$sample_id))
                 
ggplot(detected, aes(x=name, y=detected)) + 
                 geom_bar(stat="identity") + 
                 theme_minimal() + 
                 coord_flip() + 
                 scale_y_continuous("Number of Genes detected", expand=c(0,0),
                                    limits = c(0, 30000)) + 
                 scale_x_discrete("Sample") +
                 labs(title = "# of genes detected", 
                     subtitle = plt_title) +
                 geom_hline(yintercept = 20000, color = "blue", linetype = "dashed") 
```
:::



## QC- clustering

::: {.panel-tabset}
### Heatmap after rRNA removal

```{r}
#| label: rmrna-rrna-heatmap
#| fig.height: 12
#| fig.width: 12

### Extract the vst matrix from the object
rld_mat <- assay(rld_filt)  

### Compute pairwise correlation values
rld_cor <- cor(rld_mat)

### Plot heatmap
pheatmap(rld_cor, main = "Correlation heatmap, after rRNA removal")
```

### Clustering after rRNA removal

```{r}
#| label: rmrna-clustering-filt

sampleDists <- dist(t(assay(rld_filt)))
plot(hclust(sampleDists), main = paste0("Cluster Dendrogram, ", plt_title))
```

### PCA after rRNA removal


```{r}
#| label: rmrna-pca-filt-condition
make_pca(rld_filt, intgroup = "condition",
         title = "PCA plot, after removing rRNA and chrM") 
```

### PCA, labelled

```{r}
#| label: rmrna-pca-filt-condition-labelled

make_pca(rld_filt, intgroup = "condition", label = TRUE, 
         title = "PCA plot, after removing rRNA and chrM") 
```

### PCA, by size factor

```{r}
#| label: rmrna-pca-filt-sf

make_pca(rld_filt, intgroup = "sizeFactor", 
         title = "PCA plot, after removing rRNA and chrM") +
  scale_color_viridis(option = "A")

```
:::



# Check CCSER1 levels

We plot the normalized counts of CCSER1 in each sample:

```{r}
#| label: ccser1-norm

ccser1_gene <- "ENSDARG00000075919"

# The normalized counts
ccser1_norm <- as.data.frame(counts(dds_filt, normalized = TRUE)[ccser1_gene, ])

ccser1_norm$sample <- rownames(ccser1_norm)
colnames(ccser1_norm) <- c("counts", "sample")
head(ccser1_norm)

ggplot(ccser1_norm, aes(x = sample, y = counts)) +
  geom_col() +
  labs(title = "CCSER1 counts, normalized") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) 
```

# MA plots

Plots to assess whether samples are good replicates. 

::: {.panel-tabset}
## WT

```{r}
#| eval: FALSE
#| label: ma-wt
#| fig.height: 24
#| fig.width: 6

plot_ma_by_rep(condition_combis = generate_condition_combinations(dds_filt, "WT"))
```


## CCSER1_M

```{r}
#| eval: FALSE
#| label: ma-ccser1-m
#| fig.height: 6
#| fig.width: 6

plot_ma_by_rep(condition_combis = generate_condition_combinations(dds_filt, "CCSER1_M"))
```

## CCSER1_S

```{r}
#| eval: FALSE
#| label: ma-ccser1-s
#| fig.height: 6
#| fig.width: 6

plot_ma_by_rep(condition_combis = generate_condition_combinations(dds_filt, "CCSER1_S"))
```

:::

Everything looks good. 


# Save output

```{r}
saveRDS(ensembl.genes, file = paste0(output_dir, "ensembl_genes.RDS"))
saveRDS(data_mat, file = paste0(output_dir, "data_mat.RDS"))
saveRDS(experimental_metadata, file = paste0(output_dir, "metadata.RDS"))
saveRDS(dds_filt, file = paste0(output_dir, "dds_filt.RDS"))
```

# Summary

- Everything looks good!
- Possible batch effect with R3 and R6? 
- Same conditions cluster together on the PCA, as expected. 

# Sessioninfo

```{r}
sessionInfo()
```
